{"ast":null,"code":"var _jsxFileName = \"/home/abhi/code/project/WebApp/frontend/src/chatbot/CohereChatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { addBook, updateBook, deleteBook } from '../services/bookService';\nimport { callCohere } from './cohereUtils';\nimport './chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CohereChatbot({\n  books,\n  loadBooks\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const helpReplies = {\n    add: 'To add a book, type: Add book titled \"Book Name\" by Author Name, published in 2020.',\n    delete: 'To delete a book, type: Delete book titled \"Book Name\" or by author \"Author Name\".',\n    update: 'To update a book, say: Change the title of \"Old Title\" to \"New Title\" or Update publication year of \"Book Name\" to 2020.',\n    search: 'To search for books, type: Find books by \"Author Name\" or books published after 2000.'\n  };\n  const handleSend = async () => {\n    if (!input.trim()) return;\n    const userMessage = input.trim();\n    setMessages(prev => [...prev, {\n      role: 'user',\n      text: userMessage\n    }]);\n    setInput('');\n    try {\n      var _data$title, _data$author, _data$query, _data$query$toLowerCa;\n      const result = await callCohere(userMessage);\n      console.log(\"Parsed result from Cohere:\", result);\n      const {\n        intent,\n        data\n      } = result || {};\n      const title = (data === null || data === void 0 ? void 0 : (_data$title = data.title) === null || _data$title === void 0 ? void 0 : _data$title.trim()) || '';\n      const author = (data === null || data === void 0 ? void 0 : (_data$author = data.author) === null || _data$author === void 0 ? void 0 : _data$author.trim()) || '';\n      const year = parseInt(data === null || data === void 0 ? void 0 : data.year);\n      const query = (data === null || data === void 0 ? void 0 : (_data$query = data.query) === null || _data$query === void 0 ? void 0 : (_data$query$toLowerCa = _data$query.toLowerCase) === null || _data$query$toLowerCa === void 0 ? void 0 : _data$query$toLowerCa.call(_data$query)) || '';\n\n      // Help Queries\n      // Help Queries\n      if (intent === 'help') {\n        const rawText = userMessage.toLowerCase();\n        const helpKey = ['add', 'delete', 'update', 'search'].find(k => rawText.includes(k)); // fallback to input\n        const matchedKey = Object.keys(helpReplies).find(k => helpKey.includes(k));\n        const helpMessage = helpReplies[matchedKey] || 'You can ask me how to add, delete, update, or search books.';\n        setMessages(m => [...m, {\n          role: 'bot',\n          text: helpMessage\n        }]);\n        return;\n      }\n\n      // Helper to find matching book\n      const matchBook = () => books.find(b => {\n        var _b$title, _b$author;\n        return title && ((_b$title = b.title) === null || _b$title === void 0 ? void 0 : _b$title.toLowerCase()) === title.toLowerCase() || author && ((_b$author = b.author) === null || _b$author === void 0 ? void 0 : _b$author.toLowerCase()) === author.toLowerCase() || !isNaN(year) && b.year === year;\n      });\n\n      // ADD\n      if (intent === 'add') {\n        const newBook = {\n          title: title || 'Unknown',\n          author: author || 'Unknown',\n          year: !isNaN(year) ? year : 0 //new Date().getFullYear()\n        };\n        await addBook(newBook);\n        setMessages(m => [...m, {\n          role: 'bot',\n          text: `Added: \"${newBook.title}\" by ${newBook.author} (${newBook.year})`\n        }]);\n      }\n\n      // DELETE\n      else if (intent === 'delete') {\n        const book = matchBook();\n        if (book) {\n          await deleteBook(book.id);\n          setMessages(m => [...m, {\n            role: 'bot',\n            text: `Deleted book \"${book.title}\" by ${book.author}.`\n          }]);\n        } else {\n          throw new Error('Book to delete not found.');\n        }\n      }\n\n      // UPDATE\n      else if (intent === 'update') {\n        const book = books.find(b => {\n          var _b$title2, _b$author2;\n          return title && ((_b$title2 = b.title) === null || _b$title2 === void 0 ? void 0 : _b$title2.toLowerCase()) === title.toLowerCase() || author && ((_b$author2 = b.author) === null || _b$author2 === void 0 ? void 0 : _b$author2.toLowerCase()) === author.toLowerCase() || !isNaN(year) && b.year === year;\n        });\n        if (book) {\n          var _data$fieldsToUpdate, _data$fieldsToUpdate2, _data$fieldsToUpdate3;\n          const updated = {\n            id: book.id,\n            title: ((_data$fieldsToUpdate = data.fieldsToUpdate) === null || _data$fieldsToUpdate === void 0 ? void 0 : _data$fieldsToUpdate.title) || book.title,\n            author: ((_data$fieldsToUpdate2 = data.fieldsToUpdate) === null || _data$fieldsToUpdate2 === void 0 ? void 0 : _data$fieldsToUpdate2.author) || book.author,\n            year: ((_data$fieldsToUpdate3 = data.fieldsToUpdate) === null || _data$fieldsToUpdate3 === void 0 ? void 0 : _data$fieldsToUpdate3.year) !== undefined ? data.fieldsToUpdate.year : book.year\n          };\n          await updateBook(book.id, updated);\n          setMessages(m => [...m, {\n            role: 'bot',\n            text: `Updated book \"${updated.title}\".`\n          }]);\n        } else {\n          throw new Error('Book to update not found.');\n        }\n      }\n\n      // SEARCH\n      else if (intent === 'search') {\n        var _query$toLowerCase, _title$toLowerCase, _author$toLowerCase;\n        let results = [];\n        const lowerQuery = (query === null || query === void 0 ? void 0 : (_query$toLowerCase = query.toLowerCase) === null || _query$toLowerCase === void 0 ? void 0 : _query$toLowerCase.call(query)) || '';\n        const lowerTitleSearch = (title === null || title === void 0 ? void 0 : (_title$toLowerCase = title.toLowerCase) === null || _title$toLowerCase === void 0 ? void 0 : _title$toLowerCase.call(title)) || '';\n        const lowerAuthorSearch = (author === null || author === void 0 ? void 0 : (_author$toLowerCase = author.toLowerCase) === null || _author$toLowerCase === void 0 ? void 0 : _author$toLowerCase.call(author)) || '';\n        const isListAll = lowerQuery === 'all' || lowerQuery.includes('list all');\n        if (isListAll) {\n          results = books;\n        } else {\n          // Helper: normalize book values\n          results = books.filter(b => {\n            var _b$title3, _b$title3$toLowerCase, _b$author3, _b$author3$toLowerCas, _data$range, _data$range2;\n            const lowerTitle = ((_b$title3 = b.title) === null || _b$title3 === void 0 ? void 0 : (_b$title3$toLowerCase = _b$title3.toLowerCase) === null || _b$title3$toLowerCase === void 0 ? void 0 : _b$title3$toLowerCase.call(_b$title3)) || '';\n            const lowerAuthor = ((_b$author3 = b.author) === null || _b$author3 === void 0 ? void 0 : (_b$author3$toLowerCas = _b$author3.toLowerCase) === null || _b$author3$toLowerCas === void 0 ? void 0 : _b$author3$toLowerCas.call(_b$author3)) || '';\n            const matchExactTitle = lowerTitleSearch && lowerTitle === lowerTitleSearch;\n            const matchStartsWithTitle = lowerQuery.includes(\"start\") || lowerQuery.includes(\"begin\") ? lowerTitle.startsWith(lowerTitleSearch || lowerQuery) : false;\n            const matchTitleIncludes = lowerQuery.includes(\"title\") || lowerQuery.includes(\"having\") || lowerQuery.includes(\"with\") ? lowerTitle.includes(lowerTitleSearch || lowerQuery) : false;\n            const matchAuthor = lowerAuthorSearch && lowerAuthor.includes(lowerAuthorSearch);\n            const matchQueryAnywhere = lowerQuery && (lowerTitle.includes(lowerQuery) || lowerAuthor.includes(lowerQuery));\n            const matchYear = !isNaN(year) && b.year === year;\n            const matchRange = ((_data$range = data.range) === null || _data$range === void 0 ? void 0 : _data$range.after) && b.year > parseInt(data.range.after) || ((_data$range2 = data.range) === null || _data$range2 === void 0 ? void 0 : _data$range2.before) && b.year < parseInt(data.range.before);\n            return matchExactTitle ||\n            // exact match (first priority)\n            matchStartsWithTitle || matchTitleIncludes || matchAuthor || matchYear || matchRange || matchQueryAnywhere;\n          });\n\n          // ❗ Special: If an exact match exists, return only it\n          const exact = books.find(b => {\n            var _b$title4;\n            return ((_b$title4 = b.title) === null || _b$title4 === void 0 ? void 0 : _b$title4.toLowerCase()) === lowerTitleSearch;\n          });\n          if (exact && !lowerQuery.includes(\"start\") && !lowerQuery.includes(\"begin\") && !lowerQuery.includes(\"having\") && !lowerQuery.includes(\"title\")) {\n            results = [exact];\n          }\n        }\n        const noFiltersActive = !title && !author && isNaN(year) && !query && !data.range;\n        const finalResults = noFiltersActive ? books : results;\n        if (finalResults.length) {\n          const text = finalResults.map(b => `- ${b.title} by ${b.author} (${b.year})`).join('\\n');\n          setMessages(m => [...m, {\n            role: 'bot',\n            text: `Found ${finalResults.length} book(s):\\n${text}`\n          }]);\n        } else {\n          setMessages(m => [...m, {\n            role: 'bot',\n            text: 'No matching books found.'\n          }]);\n        }\n      }\n      await loadBooks();\n    } catch (error) {\n      console.error(\"Error handling input:\", error);\n      setMessages(m => [...m, {\n        role: 'bot',\n        text: error.message || \"Something went wrong.\"\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Ask something...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: msg.role === 'user' ? 'chat-user' : 'chat-bot',\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.role === 'user' ? 'You' : 'Bot', \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this), \" \", msg.text]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: input,\n      onChange: e => setInput(e.target.value),\n      placeholder: \"Type your message...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSend,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n}\n_s(CohereChatbot, \"HDAtGPGcvWga1zf1TBXg51T+tsc=\");\n_c = CohereChatbot;\nexport default CohereChatbot;\nvar _c;\n$RefreshReg$(_c, \"CohereChatbot\");","map":{"version":3,"names":["React","useState","addBook","updateBook","deleteBook","callCohere","jsxDEV","_jsxDEV","CohereChatbot","books","loadBooks","_s","messages","setMessages","input","setInput","helpReplies","add","delete","update","search","handleSend","trim","userMessage","prev","role","text","_data$title","_data$author","_data$query","_data$query$toLowerCa","result","console","log","intent","data","title","author","year","parseInt","query","toLowerCase","call","rawText","helpKey","find","k","includes","matchedKey","Object","keys","helpMessage","m","matchBook","b","_b$title","_b$author","isNaN","newBook","book","id","Error","_b$title2","_b$author2","_data$fieldsToUpdate","_data$fieldsToUpdate2","_data$fieldsToUpdate3","updated","fieldsToUpdate","undefined","_query$toLowerCase","_title$toLowerCase","_author$toLowerCase","results","lowerQuery","lowerTitleSearch","lowerAuthorSearch","isListAll","filter","_b$title3","_b$title3$toLowerCase","_b$author3","_b$author3$toLowerCas","_data$range","_data$range2","lowerTitle","lowerAuthor","matchExactTitle","matchStartsWithTitle","startsWith","matchTitleIncludes","matchAuthor","matchQueryAnywhere","matchYear","matchRange","range","after","before","exact","_b$title4","noFiltersActive","finalResults","length","map","join","error","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","msg","idx","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/home/abhi/code/project/WebApp/frontend/src/chatbot/CohereChatbot.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { addBook, updateBook, deleteBook } from '../services/bookService';\nimport { callCohere } from './cohereUtils';\nimport './chatbot.css';\n\nfunction CohereChatbot({ books, loadBooks }) {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n\n  const helpReplies = {\n    add: 'To add a book, type: Add book titled \"Book Name\" by Author Name, published in 2020.',\n    delete: 'To delete a book, type: Delete book titled \"Book Name\" or by author \"Author Name\".',\n    update: 'To update a book, say: Change the title of \"Old Title\" to \"New Title\" or Update publication year of \"Book Name\" to 2020.',\n    search: 'To search for books, type: Find books by \"Author Name\" or books published after 2000.'\n  };\n\n  const handleSend = async () => {\n    if (!input.trim()) return;\n\n    const userMessage = input.trim();\n    setMessages(prev => [...prev, { role: 'user', text: userMessage }]);\n    setInput('');\n\n    try {\n      const result = await callCohere(userMessage);\n      console.log(\"Parsed result from Cohere:\", result);\n\n      const { intent, data } = result || {};\n      const title = data?.title?.trim() || '';\n      const author = data?.author?.trim() || '';\n      const year = parseInt(data?.year);\n      const query = data?.query?.toLowerCase?.() || '';\n      \n\n      // Help Queries\n      // Help Queries\nif (intent === 'help') {\n  const rawText = userMessage.toLowerCase();\n  const helpKey = ['add', 'delete', 'update', 'search'].find(k => rawText.includes(k));  // fallback to input\n  const matchedKey = Object.keys(helpReplies).find(k => helpKey.includes(k));\n  const helpMessage =\n    helpReplies[matchedKey] || 'You can ask me how to add, delete, update, or search books.';\n\n  setMessages(m => [...m, { role: 'bot', text: helpMessage }]);\n  return;\n}\n\n\n      // Helper to find matching book\n      const matchBook = () => books.find(b =>\n        (title && b.title?.toLowerCase() === title.toLowerCase()) ||\n        (author && b.author?.toLowerCase() === author.toLowerCase()) ||\n        (!isNaN(year) && b.year === year)\n      );\n\n      // ADD\n      if (intent === 'add') {\n        const newBook = {\n          title: title || 'Unknown',\n          author: author || 'Unknown',\n          year: !isNaN(year) ? year : 0//new Date().getFullYear()\n        };\n        await addBook(newBook);\n        setMessages(m => [...m, { role: 'bot', text: `Added: \"${newBook.title}\" by ${newBook.author} (${newBook.year})` }]);\n      }\n\n      // DELETE\n      else if (intent === 'delete') {\n        const book = matchBook();\n        if (book) {\n          await deleteBook(book.id);\n          setMessages(m => [...m, { role: 'bot', text: `Deleted book \"${book.title}\" by ${book.author}.` }]);\n        } else {\n          throw new Error('Book to delete not found.');\n        }\n      }\n\n     // UPDATE\nelse if (intent === 'update') {\n  const book = books.find(b =>\n    (title && b.title?.toLowerCase() === title.toLowerCase()) ||\n    (author && b.author?.toLowerCase() === author.toLowerCase()) ||\n    (!isNaN(year) && b.year === year)\n  );\n\n  if (book) {\n    const updated = {\n      id: book.id,\n      title: data.fieldsToUpdate?.title || book.title,\n      author: data.fieldsToUpdate?.author || book.author,\n      year: data.fieldsToUpdate?.year !== undefined ? data.fieldsToUpdate.year : book.year,\n    };\n\n    await updateBook(book.id, updated);\n    setMessages(m => [...m, { role: 'bot', text: `Updated book \"${updated.title}\".` }]);\n  } else {\n    throw new Error('Book to update not found.');\n  }\n}\n\n\n// SEARCH\nelse if (intent === 'search') {\n  let results = [];\n\n  const lowerQuery = query?.toLowerCase?.() || '';\n  const lowerTitleSearch = title?.toLowerCase?.() || '';\n  const lowerAuthorSearch = author?.toLowerCase?.() || '';\n  const isListAll = lowerQuery === 'all' || lowerQuery.includes('list all');\n\n  if (isListAll) {\n    results = books;\n  } else {\n    // Helper: normalize book values\n    results = books.filter(b => {\n      const lowerTitle = b.title?.toLowerCase?.() || '';\n      const lowerAuthor = b.author?.toLowerCase?.() || '';\n\n      const matchExactTitle = lowerTitleSearch && lowerTitle === lowerTitleSearch;\n      const matchStartsWithTitle = lowerQuery.includes(\"start\") || lowerQuery.includes(\"begin\")\n        ? lowerTitle.startsWith(lowerTitleSearch || lowerQuery)\n        : false;\n      const matchTitleIncludes = lowerQuery.includes(\"title\") || lowerQuery.includes(\"having\") || lowerQuery.includes(\"with\")\n        ? lowerTitle.includes(lowerTitleSearch || lowerQuery)\n        : false;\n\n      const matchAuthor = lowerAuthorSearch && lowerAuthor.includes(lowerAuthorSearch);\n      const matchQueryAnywhere = lowerQuery && (lowerTitle.includes(lowerQuery) || lowerAuthor.includes(lowerQuery));\n      const matchYear = !isNaN(year) && b.year === year;\n      const matchRange =\n        (data.range?.after && b.year > parseInt(data.range.after)) ||\n        (data.range?.before && b.year < parseInt(data.range.before));\n\n      return (\n        matchExactTitle || // exact match (first priority)\n        matchStartsWithTitle ||\n        matchTitleIncludes ||\n        matchAuthor ||\n        matchYear ||\n        matchRange ||\n        matchQueryAnywhere\n      );\n    });\n\n    // ❗ Special: If an exact match exists, return only it\n    const exact = books.find(b => b.title?.toLowerCase() === lowerTitleSearch);\n    if (exact && !lowerQuery.includes(\"start\") && !lowerQuery.includes(\"begin\") && !lowerQuery.includes(\"having\") && !lowerQuery.includes(\"title\")) {\n      results = [exact];\n    }\n  }\n\n  const noFiltersActive =\n    !title && !author && isNaN(year) && !query && !data.range;\n\n  const finalResults = noFiltersActive ? books : results;\n\n  if (finalResults.length) {\n    const text = finalResults.map(b => `- ${b.title} by ${b.author} (${b.year})`).join('\\n');\n    setMessages(m => [...m, { role: 'bot', text: `Found ${finalResults.length} book(s):\\n${text}` }]);\n  } else {\n    setMessages(m => [...m, { role: 'bot', text: 'No matching books found.' }]);\n  }\n}\n\n\n      await loadBooks();\n    } catch (error) {\n      console.error(\"Error handling input:\", error);\n      setMessages(m => [...m, { role: 'bot', text: error.message || \"Something went wrong.\" }]);\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <h3>Ask something...</h3>\n      <div className=\"chat-box\">\n        {messages.map((msg, idx) => (\n          <div key={idx} className={msg.role === 'user' ? 'chat-user' : 'chat-bot'}>\n            <strong>{msg.role === 'user' ? 'You' : 'Bot'}:</strong> {msg.text}\n          </div>\n        ))}\n      </div>\n      <input\n        type=\"text\"\n        value={input}\n        onChange={e => setInput(e.target.value)}\n        placeholder=\"Type your message...\"\n      />\n      <button onClick={handleSend}>Send</button>\n    </div>\n  );\n}\n\nexport default CohereChatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}