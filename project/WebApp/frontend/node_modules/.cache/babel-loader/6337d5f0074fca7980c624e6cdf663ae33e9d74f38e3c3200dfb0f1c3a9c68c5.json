{"ast":null,"code":"var _jsxFileName = \"/home/abhi/code/project/WebApp/frontend/src/chatbot/CohereChatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { TextField, Button, Paper, Typography, Box, List, ListItem, ListItemText, IconButton, Divider } from '@mui/material';\nimport { Send as SendIcon } from '@mui/icons-material';\nimport { addBook, updateBook, deleteBook } from '../services/bookService';\nimport { callCohere } from './cohereUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CohereChatbot({\n  books,\n  loadBooks\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const helpReplies = {\n    add: 'To add a book, type: Add book titled \"Book Name\" by Author Name, published in 2020.',\n    delete: 'To delete a book, type: Delete book titled \"Book Name\" or by author \"Author Name\".',\n    update: 'To update a book, say: Change the title of \"Old Title\" to \"New Title\" or Update publication year of \"Book Name\" to 2020.',\n    search: 'To search for books, type: Find books by \"Author Name\" or books published after 2000.'\n  };\n  const handleSend = async () => {\n    if (!input.trim()) return;\n    const userMessage = input.trim();\n    setMessages(prev => [...prev, {\n      role: 'user',\n      text: userMessage\n    }]);\n    setInput('');\n    try {\n      var _data$title, _data$author, _data$query, _data$query$toLowerCa;\n      const result = await callCohere(userMessage);\n      const {\n        intent,\n        data\n      } = result || {};\n      const title = (data === null || data === void 0 ? void 0 : (_data$title = data.title) === null || _data$title === void 0 ? void 0 : _data$title.trim()) || '';\n      const author = (data === null || data === void 0 ? void 0 : (_data$author = data.author) === null || _data$author === void 0 ? void 0 : _data$author.trim()) || '';\n      const year = parseInt((data === null || data === void 0 ? void 0 : data.year) || (data === null || data === void 0 ? void 0 : data.publicationYear));\n      const query = (data === null || data === void 0 ? void 0 : (_data$query = data.query) === null || _data$query === void 0 ? void 0 : (_data$query$toLowerCa = _data$query.toLowerCase) === null || _data$query$toLowerCa === void 0 ? void 0 : _data$query$toLowerCa.call(_data$query)) || '';\n      if (intent === 'help') {\n        const helpKey = (data.query || '').toLowerCase();\n        const matchedKey = Object.keys(helpReplies).find(k => helpKey.includes(k));\n        const helpMessage = helpReplies[matchedKey] || 'You can ask me how to add, delete, update, or search books.';\n        setMessages(m => [...m, {\n          role: 'bot',\n          text: helpMessage\n        }]);\n        return;\n      }\n      const matchBook = () => books.find(b => {\n        var _b$title, _b$author;\n        return title && ((_b$title = b.title) === null || _b$title === void 0 ? void 0 : _b$title.toLowerCase()) === title.toLowerCase() || author && ((_b$author = b.author) === null || _b$author === void 0 ? void 0 : _b$author.toLowerCase()) === author.toLowerCase() || !isNaN(year) && b.year === year;\n      });\n      if (intent === 'add') {\n        const newBook = {\n          title: title || 'Unknown',\n          author: author || 'Unknown',\n          year: !isNaN(year) ? year : 0 //new Date().getFullYear()\n        };\n        await addBook(newBook);\n        setMessages(m => [...m, {\n          role: 'bot',\n          text: `Added: \"${newBook.title}\" by ${newBook.author} (${newBook.year})`\n        }]);\n      } else if (intent === 'delete') {\n        const book = matchBook();\n        if (book) {\n          await deleteBook(book.id);\n          setMessages(m => [...m, {\n            role: 'bot',\n            text: `Deleted book \"${book.title}\" by ${book.author}.`\n          }]);\n        } else {\n          throw new Error('Book to delete not found.');\n        }\n      } else if (intent === 'update') {\n        const book = matchBook();\n        if (book) {\n          const updated = {\n            id: book.id,\n            title: title || book.title,\n            author: author || book.author,\n            year: !isNaN(year) ? year : book.year\n          };\n          await updateBook(book.id, updated);\n          setMessages(m => [...m, {\n            role: 'bot',\n            text: `Updated book \"${updated.title}\".`\n          }]);\n        } else {\n          throw new Error('Book to update not found.');\n        }\n      } else if (intent === 'search') {\n        const results = books.filter(b => {\n          var _b$title2, _b$title2$toLowerCase, _b$author2, _b$author2$toLowerCas;\n          const lowerTitle = ((_b$title2 = b.title) === null || _b$title2 === void 0 ? void 0 : (_b$title2$toLowerCase = _b$title2.toLowerCase) === null || _b$title2$toLowerCase === void 0 ? void 0 : _b$title2$toLowerCase.call(_b$title2)) || '';\n          const lowerAuthor = ((_b$author2 = b.author) === null || _b$author2 === void 0 ? void 0 : (_b$author2$toLowerCas = _b$author2.toLowerCase) === null || _b$author2$toLowerCas === void 0 ? void 0 : _b$author2$toLowerCas.call(_b$author2)) || '';\n          const inQuery = query && (lowerTitle.includes(query) || lowerAuthor.includes(query));\n          const inRange = data.after && b.year > parseInt(data.after) || data.before && b.year < parseInt(data.before);\n          return title && lowerTitle.includes(title.toLowerCase()) || author && lowerAuthor.includes(author.toLowerCase()) || !isNaN(year) && b.year === year || inQuery || inRange;\n        });\n        if (results.length) {\n          const text = results.map(b => `- ${b.title} by ${b.author} (${b.year})`).join('\\n');\n          setMessages(m => [...m, {\n            role: 'bot',\n            text: `Found ${results.length} book(s):\\n${text}`\n          }]);\n        } else {\n          setMessages(m => [...m, {\n            role: 'bot',\n            text: 'No matching books found.'\n          }]);\n        }\n      }\n      await loadBooks();\n    } catch (error) {\n      console.error(\"Error handling input:\", error);\n      setMessages(m => [...m, {\n        role: 'bot',\n        text: error.message || \"Something went wrong.\"\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 3,\n    sx: {\n      p: 2,\n      maxWidth: 800,\n      mx: 'auto',\n      my: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      gutterBottom: true,\n      children: \"Ask something...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      sx: {\n        maxHeight: 400,\n        overflowY: 'auto',\n        mb: 2\n      },\n      children: messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(ListItem, {\n        sx: {\n          bgcolor: msg.role === 'user' ? '#e3f2fd' : '#fce4ec',\n          borderRadius: 2,\n          mb: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: msg.role === 'user' ? 'You' : 'Bot',\n          secondary: /*#__PURE__*/_jsxDEV(Typography, {\n            component: \"span\",\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 26\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        gap: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        variant: \"outlined\",\n        placeholder: \"Type your message...\",\n        value: input,\n        onChange: e => setInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        color: \"primary\",\n        onClick: handleSend,\n        sx: {\n          bgcolor: '#1976d2',\n          color: 'white',\n          borderRadius: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n_s(CohereChatbot, \"HDAtGPGcvWga1zf1TBXg51T+tsc=\");\n_c = CohereChatbot;\nexport default CohereChatbot;\nvar _c;\n$RefreshReg$(_c, \"CohereChatbot\");","map":{"version":3,"names":["React","useState","TextField","Button","Paper","Typography","Box","List","ListItem","ListItemText","IconButton","Divider","Send","SendIcon","addBook","updateBook","deleteBook","callCohere","jsxDEV","_jsxDEV","CohereChatbot","books","loadBooks","_s","messages","setMessages","input","setInput","helpReplies","add","delete","update","search","handleSend","trim","userMessage","prev","role","text","_data$title","_data$author","_data$query","_data$query$toLowerCa","result","intent","data","title","author","year","parseInt","publicationYear","query","toLowerCase","call","helpKey","matchedKey","Object","keys","find","k","includes","helpMessage","m","matchBook","b","_b$title","_b$author","isNaN","newBook","book","id","Error","updated","results","filter","_b$title2","_b$title2$toLowerCase","_b$author2","_b$author2$toLowerCas","lowerTitle","lowerAuthor","inQuery","inRange","after","before","length","map","join","error","console","message","elevation","sx","p","maxWidth","mx","my","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","maxHeight","overflowY","mb","msg","idx","bgcolor","borderRadius","primary","secondary","component","display","gap","fullWidth","placeholder","value","onChange","e","target","color","onClick","_c","$RefreshReg$"],"sources":["/home/abhi/code/project/WebApp/frontend/src/chatbot/CohereChatbot.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { TextField, Button, Paper, Typography, Box, List, ListItem, ListItemText, IconButton, Divider } from '@mui/material';\nimport { Send as SendIcon } from '@mui/icons-material';\nimport { addBook, updateBook, deleteBook } from '../services/bookService';\nimport { callCohere } from './cohereUtils';\n\nfunction CohereChatbot({ books, loadBooks }) {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n\n  const helpReplies = {\n    add: 'To add a book, type: Add book titled \"Book Name\" by Author Name, published in 2020.',\n    delete: 'To delete a book, type: Delete book titled \"Book Name\" or by author \"Author Name\".',\n    update: 'To update a book, say: Change the title of \"Old Title\" to \"New Title\" or Update publication year of \"Book Name\" to 2020.',\n    search: 'To search for books, type: Find books by \"Author Name\" or books published after 2000.'\n  };\n\n  const handleSend = async () => {\n    if (!input.trim()) return;\n\n    const userMessage = input.trim();\n    setMessages(prev => [...prev, { role: 'user', text: userMessage }]);\n    setInput('');\n\n    try {\n      const result = await callCohere(userMessage);\n      const { intent, data } = result || {};\n      const title = data?.title?.trim() || '';\n      const author = data?.author?.trim() || '';\n      const year = parseInt(data?.year || data?.publicationYear);\n      const query = data?.query?.toLowerCase?.() || '';\n\n      if (intent === 'help') {\n        const helpKey = (data.query || '').toLowerCase();\n        const matchedKey = Object.keys(helpReplies).find(k => helpKey.includes(k));\n        const helpMessage = helpReplies[matchedKey] || 'You can ask me how to add, delete, update, or search books.';\n        setMessages(m => [...m, { role: 'bot', text: helpMessage }]);\n        return;\n      }\n\n      const matchBook = () => books.find(b =>\n        (title && b.title?.toLowerCase() === title.toLowerCase()) ||\n        (author && b.author?.toLowerCase() === author.toLowerCase()) ||\n        (!isNaN(year) && b.year === year)\n      );\n\n      if (intent === 'add') {\n        const newBook = {\n          title: title || 'Unknown',\n          author: author || 'Unknown',\n          year: !isNaN(year) ? year : 0//new Date().getFullYear()\n        };\n        await addBook(newBook);\n        setMessages(m => [...m, { role: 'bot', text: `Added: \"${newBook.title}\" by ${newBook.author} (${newBook.year})` }]);\n      } else if (intent === 'delete') {\n        const book = matchBook();\n        if (book) {\n          await deleteBook(book.id);\n          setMessages(m => [...m, { role: 'bot', text: `Deleted book \"${book.title}\" by ${book.author}.` }]);\n        } else {\n          throw new Error('Book to delete not found.');\n        }\n      } else if (intent === 'update') {\n        const book = matchBook();\n        if (book) {\n          const updated = {\n            id: book.id,\n            title: title || book.title,\n            author: author || book.author,\n            year: !isNaN(year) ? year : book.year\n          };\n          await updateBook(book.id, updated);\n          setMessages(m => [...m, { role: 'bot', text: `Updated book \"${updated.title}\".` }]);\n        } else {\n          throw new Error('Book to update not found.');\n        }\n      } else if (intent === 'search') {\n        const results = books.filter(b => {\n          const lowerTitle = b.title?.toLowerCase?.() || '';\n          const lowerAuthor = b.author?.toLowerCase?.() || '';\n          const inQuery = query && (lowerTitle.includes(query) || lowerAuthor.includes(query));\n\n          const inRange =\n            (data.after && b.year > parseInt(data.after)) ||\n            (data.before && b.year < parseInt(data.before));\n\n          return (\n            (title && lowerTitle.includes(title.toLowerCase())) ||\n            (author && lowerAuthor.includes(author.toLowerCase())) ||\n            (!isNaN(year) && b.year === year) ||\n            inQuery || inRange\n          );\n        });\n\n        if (results.length) {\n          const text = results.map(b => `- ${b.title} by ${b.author} (${b.year})`).join('\\n');\n          setMessages(m => [...m, { role: 'bot', text: `Found ${results.length} book(s):\\n${text}` }]);\n        } else {\n          setMessages(m => [...m, { role: 'bot', text: 'No matching books found.' }]);\n        }\n      }\n\n      await loadBooks();\n    } catch (error) {\n      console.error(\"Error handling input:\", error);\n      setMessages(m => [...m, { role: 'bot', text: error.message || \"Something went wrong.\" }]);\n    }\n  };\n\n  return (\n    <Paper elevation={3} sx={{ p: 2, maxWidth: 800, mx: 'auto', my: 4 }}>\n      <Typography variant=\"h5\" gutterBottom>\n        Ask something...\n      </Typography>\n\n      <List sx={{ maxHeight: 400, overflowY: 'auto', mb: 2 }}>\n        {messages.map((msg, idx) => (\n          <ListItem key={idx} sx={{ bgcolor: msg.role === 'user' ? '#e3f2fd' : '#fce4ec', borderRadius: 2, mb: 1 }}>\n            <ListItemText\n              primary={msg.role === 'user' ? 'You' : 'Bot'}\n              secondary={<Typography component=\"span\">{msg.text}</Typography>}\n            />\n          </ListItem>\n        ))}\n      </List>\n\n      <Box sx={{ display: 'flex', gap: 2 }}>\n        <TextField\n          fullWidth\n          variant=\"outlined\"\n          placeholder=\"Type your message...\"\n          value={input}\n          onChange={e => setInput(e.target.value)}\n        />\n        <IconButton color=\"primary\" onClick={handleSend} sx={{ bgcolor: '#1976d2', color: 'white', borderRadius: 2 }}>\n          <SendIcon />\n        </IconButton>\n      </Box>\n    </Paper>\n  );\n}\n\nexport default CohereChatbot;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,SAAS,EAAEC,MAAM,EAAEC,KAAK,EAAEC,UAAU,EAAEC,GAAG,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,YAAY,EAAEC,UAAU,EAAEC,OAAO,QAAQ,eAAe;AAC5H,SAASC,IAAI,IAAIC,QAAQ,QAAQ,qBAAqB;AACtD,SAASC,OAAO,EAAEC,UAAU,EAAEC,UAAU,QAAQ,yBAAyB;AACzE,SAASC,UAAU,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,SAASC,aAAaA,CAAC;EAAEC,KAAK;EAAEC;AAAU,CAAC,EAAE;EAAAC,EAAA;EAC3C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACyB,KAAK,EAAEC,QAAQ,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAM2B,WAAW,GAAG;IAClBC,GAAG,EAAE,qFAAqF;IAC1FC,MAAM,EAAE,oFAAoF;IAC5FC,MAAM,EAAE,0HAA0H;IAClIC,MAAM,EAAE;EACV,CAAC;EAED,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI,CAACP,KAAK,CAACQ,IAAI,CAAC,CAAC,EAAE;IAEnB,MAAMC,WAAW,GAAGT,KAAK,CAACQ,IAAI,CAAC,CAAC;IAChCT,WAAW,CAACW,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;MAAEC,IAAI,EAAE,MAAM;MAAEC,IAAI,EAAEH;IAAY,CAAC,CAAC,CAAC;IACnER,QAAQ,CAAC,EAAE,CAAC;IAEZ,IAAI;MAAA,IAAAY,WAAA,EAAAC,YAAA,EAAAC,WAAA,EAAAC,qBAAA;MACF,MAAMC,MAAM,GAAG,MAAM1B,UAAU,CAACkB,WAAW,CAAC;MAC5C,MAAM;QAAES,MAAM;QAAEC;MAAK,CAAC,GAAGF,MAAM,IAAI,CAAC,CAAC;MACrC,MAAMG,KAAK,GAAG,CAAAD,IAAI,aAAJA,IAAI,wBAAAN,WAAA,GAAJM,IAAI,CAAEC,KAAK,cAAAP,WAAA,uBAAXA,WAAA,CAAaL,IAAI,CAAC,CAAC,KAAI,EAAE;MACvC,MAAMa,MAAM,GAAG,CAAAF,IAAI,aAAJA,IAAI,wBAAAL,YAAA,GAAJK,IAAI,CAAEE,MAAM,cAAAP,YAAA,uBAAZA,YAAA,CAAcN,IAAI,CAAC,CAAC,KAAI,EAAE;MACzC,MAAMc,IAAI,GAAGC,QAAQ,CAAC,CAAAJ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEG,IAAI,MAAIH,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEK,eAAe,EAAC;MAC1D,MAAMC,KAAK,GAAG,CAAAN,IAAI,aAAJA,IAAI,wBAAAJ,WAAA,GAAJI,IAAI,CAAEM,KAAK,cAAAV,WAAA,wBAAAC,qBAAA,GAAXD,WAAA,CAAaW,WAAW,cAAAV,qBAAA,uBAAxBA,qBAAA,CAAAW,IAAA,CAAAZ,WAA2B,CAAC,KAAI,EAAE;MAEhD,IAAIG,MAAM,KAAK,MAAM,EAAE;QACrB,MAAMU,OAAO,GAAG,CAACT,IAAI,CAACM,KAAK,IAAI,EAAE,EAAEC,WAAW,CAAC,CAAC;QAChD,MAAMG,UAAU,GAAGC,MAAM,CAACC,IAAI,CAAC7B,WAAW,CAAC,CAAC8B,IAAI,CAACC,CAAC,IAAIL,OAAO,CAACM,QAAQ,CAACD,CAAC,CAAC,CAAC;QAC1E,MAAME,WAAW,GAAGjC,WAAW,CAAC2B,UAAU,CAAC,IAAI,6DAA6D;QAC5G9B,WAAW,CAACqC,CAAC,IAAI,CAAC,GAAGA,CAAC,EAAE;UAAEzB,IAAI,EAAE,KAAK;UAAEC,IAAI,EAAEuB;QAAY,CAAC,CAAC,CAAC;QAC5D;MACF;MAEA,MAAME,SAAS,GAAGA,CAAA,KAAM1C,KAAK,CAACqC,IAAI,CAACM,CAAC;QAAA,IAAAC,QAAA,EAAAC,SAAA;QAAA,OACjCpB,KAAK,IAAI,EAAAmB,QAAA,GAAAD,CAAC,CAAClB,KAAK,cAAAmB,QAAA,uBAAPA,QAAA,CAASb,WAAW,CAAC,CAAC,MAAKN,KAAK,CAACM,WAAW,CAAC,CAAC,IACvDL,MAAM,IAAI,EAAAmB,SAAA,GAAAF,CAAC,CAACjB,MAAM,cAAAmB,SAAA,uBAARA,SAAA,CAAUd,WAAW,CAAC,CAAC,MAAKL,MAAM,CAACK,WAAW,CAAC,CAAE,IAC3D,CAACe,KAAK,CAACnB,IAAI,CAAC,IAAIgB,CAAC,CAAChB,IAAI,KAAKA,IAAK;MAAA,CACnC,CAAC;MAED,IAAIJ,MAAM,KAAK,KAAK,EAAE;QACpB,MAAMwB,OAAO,GAAG;UACdtB,KAAK,EAAEA,KAAK,IAAI,SAAS;UACzBC,MAAM,EAAEA,MAAM,IAAI,SAAS;UAC3BC,IAAI,EAAE,CAACmB,KAAK,CAACnB,IAAI,CAAC,GAAGA,IAAI,GAAG,CAAC;QAC/B,CAAC;QACD,MAAMlC,OAAO,CAACsD,OAAO,CAAC;QACtB3C,WAAW,CAACqC,CAAC,IAAI,CAAC,GAAGA,CAAC,EAAE;UAAEzB,IAAI,EAAE,KAAK;UAAEC,IAAI,EAAE,WAAW8B,OAAO,CAACtB,KAAK,QAAQsB,OAAO,CAACrB,MAAM,KAAKqB,OAAO,CAACpB,IAAI;QAAI,CAAC,CAAC,CAAC;MACrH,CAAC,MAAM,IAAIJ,MAAM,KAAK,QAAQ,EAAE;QAC9B,MAAMyB,IAAI,GAAGN,SAAS,CAAC,CAAC;QACxB,IAAIM,IAAI,EAAE;UACR,MAAMrD,UAAU,CAACqD,IAAI,CAACC,EAAE,CAAC;UACzB7C,WAAW,CAACqC,CAAC,IAAI,CAAC,GAAGA,CAAC,EAAE;YAAEzB,IAAI,EAAE,KAAK;YAAEC,IAAI,EAAE,iBAAiB+B,IAAI,CAACvB,KAAK,QAAQuB,IAAI,CAACtB,MAAM;UAAI,CAAC,CAAC,CAAC;QACpG,CAAC,MAAM;UACL,MAAM,IAAIwB,KAAK,CAAC,2BAA2B,CAAC;QAC9C;MACF,CAAC,MAAM,IAAI3B,MAAM,KAAK,QAAQ,EAAE;QAC9B,MAAMyB,IAAI,GAAGN,SAAS,CAAC,CAAC;QACxB,IAAIM,IAAI,EAAE;UACR,MAAMG,OAAO,GAAG;YACdF,EAAE,EAAED,IAAI,CAACC,EAAE;YACXxB,KAAK,EAAEA,KAAK,IAAIuB,IAAI,CAACvB,KAAK;YAC1BC,MAAM,EAAEA,MAAM,IAAIsB,IAAI,CAACtB,MAAM;YAC7BC,IAAI,EAAE,CAACmB,KAAK,CAACnB,IAAI,CAAC,GAAGA,IAAI,GAAGqB,IAAI,CAACrB;UACnC,CAAC;UACD,MAAMjC,UAAU,CAACsD,IAAI,CAACC,EAAE,EAAEE,OAAO,CAAC;UAClC/C,WAAW,CAACqC,CAAC,IAAI,CAAC,GAAGA,CAAC,EAAE;YAAEzB,IAAI,EAAE,KAAK;YAAEC,IAAI,EAAE,iBAAiBkC,OAAO,CAAC1B,KAAK;UAAK,CAAC,CAAC,CAAC;QACrF,CAAC,MAAM;UACL,MAAM,IAAIyB,KAAK,CAAC,2BAA2B,CAAC;QAC9C;MACF,CAAC,MAAM,IAAI3B,MAAM,KAAK,QAAQ,EAAE;QAC9B,MAAM6B,OAAO,GAAGpD,KAAK,CAACqD,MAAM,CAACV,CAAC,IAAI;UAAA,IAAAW,SAAA,EAAAC,qBAAA,EAAAC,UAAA,EAAAC,qBAAA;UAChC,MAAMC,UAAU,GAAG,EAAAJ,SAAA,GAAAX,CAAC,CAAClB,KAAK,cAAA6B,SAAA,wBAAAC,qBAAA,GAAPD,SAAA,CAASvB,WAAW,cAAAwB,qBAAA,uBAApBA,qBAAA,CAAAvB,IAAA,CAAAsB,SAAuB,CAAC,KAAI,EAAE;UACjD,MAAMK,WAAW,GAAG,EAAAH,UAAA,GAAAb,CAAC,CAACjB,MAAM,cAAA8B,UAAA,wBAAAC,qBAAA,GAARD,UAAA,CAAUzB,WAAW,cAAA0B,qBAAA,uBAArBA,qBAAA,CAAAzB,IAAA,CAAAwB,UAAwB,CAAC,KAAI,EAAE;UACnD,MAAMI,OAAO,GAAG9B,KAAK,KAAK4B,UAAU,CAACnB,QAAQ,CAACT,KAAK,CAAC,IAAI6B,WAAW,CAACpB,QAAQ,CAACT,KAAK,CAAC,CAAC;UAEpF,MAAM+B,OAAO,GACVrC,IAAI,CAACsC,KAAK,IAAInB,CAAC,CAAChB,IAAI,GAAGC,QAAQ,CAACJ,IAAI,CAACsC,KAAK,CAAC,IAC3CtC,IAAI,CAACuC,MAAM,IAAIpB,CAAC,CAAChB,IAAI,GAAGC,QAAQ,CAACJ,IAAI,CAACuC,MAAM,CAAE;UAEjD,OACGtC,KAAK,IAAIiC,UAAU,CAACnB,QAAQ,CAACd,KAAK,CAACM,WAAW,CAAC,CAAC,CAAC,IACjDL,MAAM,IAAIiC,WAAW,CAACpB,QAAQ,CAACb,MAAM,CAACK,WAAW,CAAC,CAAC,CAAE,IACrD,CAACe,KAAK,CAACnB,IAAI,CAAC,IAAIgB,CAAC,CAAChB,IAAI,KAAKA,IAAK,IACjCiC,OAAO,IAAIC,OAAO;QAEtB,CAAC,CAAC;QAEF,IAAIT,OAAO,CAACY,MAAM,EAAE;UAClB,MAAM/C,IAAI,GAAGmC,OAAO,CAACa,GAAG,CAACtB,CAAC,IAAI,KAAKA,CAAC,CAAClB,KAAK,OAAOkB,CAAC,CAACjB,MAAM,KAAKiB,CAAC,CAAChB,IAAI,GAAG,CAAC,CAACuC,IAAI,CAAC,IAAI,CAAC;UACnF9D,WAAW,CAACqC,CAAC,IAAI,CAAC,GAAGA,CAAC,EAAE;YAAEzB,IAAI,EAAE,KAAK;YAAEC,IAAI,EAAE,SAASmC,OAAO,CAACY,MAAM,cAAc/C,IAAI;UAAG,CAAC,CAAC,CAAC;QAC9F,CAAC,MAAM;UACLb,WAAW,CAACqC,CAAC,IAAI,CAAC,GAAGA,CAAC,EAAE;YAAEzB,IAAI,EAAE,KAAK;YAAEC,IAAI,EAAE;UAA2B,CAAC,CAAC,CAAC;QAC7E;MACF;MAEA,MAAMhB,SAAS,CAAC,CAAC;IACnB,CAAC,CAAC,OAAOkE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C/D,WAAW,CAACqC,CAAC,IAAI,CAAC,GAAGA,CAAC,EAAE;QAAEzB,IAAI,EAAE,KAAK;QAAEC,IAAI,EAAEkD,KAAK,CAACE,OAAO,IAAI;MAAwB,CAAC,CAAC,CAAC;IAC3F;EACF,CAAC;EAED,oBACEvE,OAAA,CAACf,KAAK;IAACuF,SAAS,EAAE,CAAE;IAACC,EAAE,EAAE;MAAEC,CAAC,EAAE,CAAC;MAAEC,QAAQ,EAAE,GAAG;MAAEC,EAAE,EAAE,MAAM;MAAEC,EAAE,EAAE;IAAE,CAAE;IAAAC,QAAA,gBAClE9E,OAAA,CAACd,UAAU;MAAC6F,OAAO,EAAC,IAAI;MAACC,YAAY;MAAAF,QAAA,EAAC;IAEtC;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eAEbpF,OAAA,CAACZ,IAAI;MAACqF,EAAE,EAAE;QAAEY,SAAS,EAAE,GAAG;QAAEC,SAAS,EAAE,MAAM;QAAEC,EAAE,EAAE;MAAE,CAAE;MAAAT,QAAA,EACpDzE,QAAQ,CAAC8D,GAAG,CAAC,CAACqB,GAAG,EAAEC,GAAG,kBACrBzF,OAAA,CAACX,QAAQ;QAAWoF,EAAE,EAAE;UAAEiB,OAAO,EAAEF,GAAG,CAACtE,IAAI,KAAK,MAAM,GAAG,SAAS,GAAG,SAAS;UAAEyE,YAAY,EAAE,CAAC;UAAEJ,EAAE,EAAE;QAAE,CAAE;QAAAT,QAAA,eACvG9E,OAAA,CAACV,YAAY;UACXsG,OAAO,EAAEJ,GAAG,CAACtE,IAAI,KAAK,MAAM,GAAG,KAAK,GAAG,KAAM;UAC7C2E,SAAS,eAAE7F,OAAA,CAACd,UAAU;YAAC4G,SAAS,EAAC,MAAM;YAAAhB,QAAA,EAAEU,GAAG,CAACrE;UAAI;YAAA8D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAa;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjE;MAAC,GAJWK,GAAG;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKR,CACX;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAEPpF,OAAA,CAACb,GAAG;MAACsF,EAAE,EAAE;QAAEsB,OAAO,EAAE,MAAM;QAAEC,GAAG,EAAE;MAAE,CAAE;MAAAlB,QAAA,gBACnC9E,OAAA,CAACjB,SAAS;QACRkH,SAAS;QACTlB,OAAO,EAAC,UAAU;QAClBmB,WAAW,EAAC,sBAAsB;QAClCC,KAAK,EAAE5F,KAAM;QACb6F,QAAQ,EAAEC,CAAC,IAAI7F,QAAQ,CAAC6F,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAlB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzC,CAAC,eACFpF,OAAA,CAACT,UAAU;QAACgH,KAAK,EAAC,SAAS;QAACC,OAAO,EAAE1F,UAAW;QAAC2D,EAAE,EAAE;UAAEiB,OAAO,EAAE,SAAS;UAAEa,KAAK,EAAE,OAAO;UAAEZ,YAAY,EAAE;QAAE,CAAE;QAAAb,QAAA,eAC3G9E,OAAA,CAACN,QAAQ;UAAAuF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEZ;AAAChF,EAAA,CAtIQH,aAAa;AAAAwG,EAAA,GAAbxG,aAAa;AAwItB,eAAeA,aAAa;AAAC,IAAAwG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}