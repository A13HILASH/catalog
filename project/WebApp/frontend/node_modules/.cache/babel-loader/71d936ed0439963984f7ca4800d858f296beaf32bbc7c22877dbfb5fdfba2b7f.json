{"ast":null,"code":"import axios from 'axios';\nexport async function callCohere(message) {\n  const prompt = `\nYou are a helpful assistant that returns JSON for book catalog operations.\nYour job is to extract the user's intent (add, update, delete, search, or help)\nand return a strict JSON object like this:\n\n{\n  \"intent\": \"add\" | \"update\" | \"delete\" | \"search\" | \"help\",\n  \"data\": {\n    \"title\": string | null,\n    \"author\": string | null,\n    \"year\": number | null,\n    \"query\": string | null,\n    \"range\": { \"after\": number, \"before\": number } | null,\n    \"fieldsToUpdate\": { \"title\"?: string, \"author\"?: string, \"year\"?: number } | null\n  }\n}\n\n### Examples:\n\nMessage: Add book titled \"Sapiens\" by Yuval Noah Harari published in 2011  \nOutput:\n{\n  \"intent\": \"add\",\n  \"data\": {\n    \"title\": \"Sapiens\",\n    \"author\": \"Yuval Noah Harari\",\n    \"year\": 2011,\n    \"query\": null,\n    \"range\": null,\n    \"fieldsToUpdate\": null\n  }\n}\n\nMessage: How to add a book?  \nOutput:\n{\n  \"intent\": \"help\",\n  \"data\": {\n    \"title\": null,\n    \"author\": null,\n    \"year\": null,\n    \"query\": \"add\",\n    \"range\": null,\n    \"fieldsToUpdate\": null\n  }\n}\n\nMessage: Delete book by author Orwell  \nOutput:\n{\n  \"intent\": \"delete\",\n  \"data\": {\n    \"title\": null,\n    \"author\": \"Orwell\",\n    \"year\": null,\n    \"query\": null,\n    \"range\": null,\n    \"fieldsToUpdate\": null\n  }\n}\n\nMessage: ${message}\n`;\n  try {\n    const response = await axios.post('https://api.cohere.ai/v1/chat', {\n      message,\n      //  user message goes here\n      preamble: prompt,\n      // system prompt\n      model: 'command-r-plus',\n      temperature: 0.3,\n      max_tokens: 300,\n      chat_history: []\n    }, {\n      headers: {\n        Authorization: `Bearer ${process.env.REACT_APP_COHERE_API_KEY}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // parsing logic\n    let parsed;\n    try {\n      const match = response.data.text.match(/```json\\n([\\s\\S]*?)\\n```/);\n      if (match) {\n        parsed = JSON.parse(match[1]);\n      } else {\n        parsed = JSON.parse(response.data.text);\n      }\n      return parsed;\n    } catch (e) {\n      console.error(\"Cohere response (unparsed):\", response.data.text);\n      throw new Error(\"Could not parse Cohere response\");\n    }\n  } catch (err) {\n    var _err$response;\n    console.error(\"Cohere API error:\", (err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err);\n    throw err;\n  }\n}","map":{"version":3,"names":["axios","callCohere","message","prompt","response","post","preamble","model","temperature","max_tokens","chat_history","headers","Authorization","process","env","REACT_APP_COHERE_API_KEY","parsed","match","data","text","JSON","parse","e","console","error","Error","err","_err$response"],"sources":["/home/abhi/code/project/WebApp/frontend/src/chatbot/cohereUtils.js"],"sourcesContent":["import axios from 'axios';\n\nexport async function callCohere(message) {\n  const prompt = `\nYou are a helpful assistant that returns JSON for book catalog operations.\nYour job is to extract the user's intent (add, update, delete, search, or help)\nand return a strict JSON object like this:\n\n{\n  \"intent\": \"add\" | \"update\" | \"delete\" | \"search\" | \"help\",\n  \"data\": {\n    \"title\": string | null,\n    \"author\": string | null,\n    \"year\": number | null,\n    \"query\": string | null,\n    \"range\": { \"after\": number, \"before\": number } | null,\n    \"fieldsToUpdate\": { \"title\"?: string, \"author\"?: string, \"year\"?: number } | null\n  }\n}\n\n### Examples:\n\nMessage: Add book titled \"Sapiens\" by Yuval Noah Harari published in 2011  \nOutput:\n{\n  \"intent\": \"add\",\n  \"data\": {\n    \"title\": \"Sapiens\",\n    \"author\": \"Yuval Noah Harari\",\n    \"year\": 2011,\n    \"query\": null,\n    \"range\": null,\n    \"fieldsToUpdate\": null\n  }\n}\n\nMessage: How to add a book?  \nOutput:\n{\n  \"intent\": \"help\",\n  \"data\": {\n    \"title\": null,\n    \"author\": null,\n    \"year\": null,\n    \"query\": \"add\",\n    \"range\": null,\n    \"fieldsToUpdate\": null\n  }\n}\n\nMessage: Delete book by author Orwell  \nOutput:\n{\n  \"intent\": \"delete\",\n  \"data\": {\n    \"title\": null,\n    \"author\": \"Orwell\",\n    \"year\": null,\n    \"query\": null,\n    \"range\": null,\n    \"fieldsToUpdate\": null\n  }\n}\n\nMessage: ${message}\n`;\n\n\n  try {\n    const response = await axios.post(\n      'https://api.cohere.ai/v1/chat',\n      {\n        message,            //  user message goes here\n        preamble: prompt,   // system prompt\n        model: 'command-r-plus',\n        temperature: 0.3,\n        max_tokens: 300,\n        chat_history: [],\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${process.env.REACT_APP_COHERE_API_KEY}`,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n\n    // parsing logic\n    let parsed;\n    try {\n      const match = response.data.text.match(/```json\\n([\\s\\S]*?)\\n```/);\n      if (match) {\n        parsed = JSON.parse(match[1]);\n      } else {\n        parsed = JSON.parse(response.data.text);\n      }\n      return parsed;\n    } catch (e) {\n      console.error(\"Cohere response (unparsed):\", response.data.text);\n      throw new Error(\"Could not parse Cohere response\");\n    }\n\n  } catch (err) {\n    console.error(\"Cohere API error:\", err?.response?.data || err);\n    throw err;\n  }\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,eAAeC,UAAUA,CAACC,OAAO,EAAE;EACxC,MAAMC,MAAM,GAAG;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAWD,OAAO;AAClB,CAAC;EAGC,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAC/B,+BAA+B,EAC/B;MACEH,OAAO;MAAa;MACpBI,QAAQ,EAAEH,MAAM;MAAI;MACpBI,KAAK,EAAE,gBAAgB;MACvBC,WAAW,EAAE,GAAG;MAChBC,UAAU,EAAE,GAAG;MACfC,YAAY,EAAE;IAChB,CAAC,EACD;MACEC,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUC,OAAO,CAACC,GAAG,CAACC,wBAAwB,EAAE;QAC/D,cAAc,EAAE;MAClB;IACF,CACF,CAAC;;IAED;IACA,IAAIC,MAAM;IACV,IAAI;MACF,MAAMC,KAAK,GAAGb,QAAQ,CAACc,IAAI,CAACC,IAAI,CAACF,KAAK,CAAC,0BAA0B,CAAC;MAClE,IAAIA,KAAK,EAAE;QACTD,MAAM,GAAGI,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC;MAC/B,CAAC,MAAM;QACLD,MAAM,GAAGI,IAAI,CAACC,KAAK,CAACjB,QAAQ,CAACc,IAAI,CAACC,IAAI,CAAC;MACzC;MACA,OAAOH,MAAM;IACf,CAAC,CAAC,OAAOM,CAAC,EAAE;MACVC,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEpB,QAAQ,CAACc,IAAI,CAACC,IAAI,CAAC;MAChE,MAAM,IAAIM,KAAK,CAAC,iCAAiC,CAAC;IACpD;EAEF,CAAC,CAAC,OAAOC,GAAG,EAAE;IAAA,IAAAC,aAAA;IACZJ,OAAO,CAACC,KAAK,CAAC,mBAAmB,EAAE,CAAAE,GAAG,aAAHA,GAAG,wBAAAC,aAAA,GAAHD,GAAG,CAAEtB,QAAQ,cAAAuB,aAAA,uBAAbA,aAAA,CAAeT,IAAI,KAAIQ,GAAG,CAAC;IAC9D,MAAMA,GAAG;EACX;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}