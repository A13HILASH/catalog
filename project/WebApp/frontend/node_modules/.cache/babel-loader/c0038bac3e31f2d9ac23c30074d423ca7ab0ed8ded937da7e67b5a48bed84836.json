{"ast":null,"code":"var _jsxFileName = \"/home/abhi/code/project/WebApp/frontend/src/chatbot/CohereChatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { addBook, updateBook, deleteBook } from '../services/bookService';\nimport { callCohere } from './cohereUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CohereChatbot({\n  books,\n  loadBooks\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const fuzzyMatch = (book, query) => {\n    const titleMatch = query.title ? book.title.toLowerCase().includes(query.title.toLowerCase()) : true;\n    const authorMatch = query.author ? book.author.toLowerCase().includes(query.author.toLowerCase()) : true;\n    const yearMatch = query.year ? String(book.publicationYear) === String(query.year) : true;\n    return titleMatch && authorMatch && yearMatch;\n  };\n  const handleSend = async () => {\n    if (!input.trim()) return;\n    const userMessage = input.trim();\n    setMessages(prev => [...prev, {\n      role: 'user',\n      text: userMessage\n    }]);\n    setInput('');\n    try {\n      var _data$title, _data$title$toLowerCa, _data$author, _data$author$toLowerC;\n      const result = await callCohere(userMessage);\n      console.log(\"Parsed result from Cohere:\", result);\n      const {\n        intent,\n        data\n      } = result || {};\n      const normalizedTitle = data === null || data === void 0 ? void 0 : (_data$title = data.title) === null || _data$title === void 0 ? void 0 : (_data$title$toLowerCa = _data$title.toLowerCase) === null || _data$title$toLowerCa === void 0 ? void 0 : _data$title$toLowerCa.call(_data$title);\n      const normalizedAuthor = data === null || data === void 0 ? void 0 : (_data$author = data.author) === null || _data$author === void 0 ? void 0 : (_data$author$toLowerC = _data$author.toLowerCase) === null || _data$author$toLowerC === void 0 ? void 0 : _data$author$toLowerC.call(_data$author);\n      const parsedYear = parseInt((data === null || data === void 0 ? void 0 : data.year) || (data === null || data === void 0 ? void 0 : data.publicationYear));\n      const normalizedYear = isNaN(parsedYear) || parsedYear <= 0 ? null : parsedYear;\n\n      // ADD\n      if (intent === 'add') {\n        const newBook = {\n          title: data.title,\n          author: data.author,\n          publicationYear: normalizedYear || new Date().getFullYear()\n        };\n        await addBook(newBook);\n        setMessages(m => [...m, {\n          role: 'bot',\n          text: `Book \"${newBook.title}\" by ${newBook.author} added.`\n        }]);\n      }\n\n      // UPDATE\n      else if (intent === 'update') {\n        let bookId = data.id;\n        let book = null;\n        if (!bookId) {\n          var _data$query, _data$query$toLowerCa;\n          // Try using query for fallback match\n          const queryTitle = (_data$query = data.query) === null || _data$query === void 0 ? void 0 : (_data$query$toLowerCa = _data$query.toLowerCase) === null || _data$query$toLowerCa === void 0 ? void 0 : _data$query$toLowerCa.call(_data$query).replace(/^change title/i, '').trim();\n          const possibleBooks = books.filter(b => normalizedTitle && b.title.toLowerCase() === normalizedTitle || queryTitle && b.title.toLowerCase() === queryTitle);\n          book = possibleBooks[0];\n          if (book) bookId = book.id;\n        } else {\n          book = books.find(b => b.id === bookId);\n        }\n\n        // Try fuzzy fallback\n        if (!book && (normalizedTitle || normalizedAuthor || normalizedYear)) {\n          book = books.find(b => fuzzyMatch(b, {\n            title: normalizedTitle,\n            author: normalizedAuthor,\n            year: normalizedYear\n          }));\n          if (book) bookId = book.id;\n        }\n        if (bookId && book) {\n          const updated = {\n            id: bookId,\n            title: data.title || book.title,\n            author: data.author || book.author,\n            publicationYear: normalizedYear || book.publicationYear\n          };\n          await updateBook(bookId, updated);\n          setMessages(m => [...m, {\n            role: 'bot',\n            text: `Book \"${updated.title}\" updated successfully.`\n          }]);\n        } else {\n          throw new Error(\"Book to update not found.\");\n        }\n      }\n\n      // DELETE\n      else if (intent === 'delete') {\n        let bookId = data.id;\n        let book = null;\n        if (!bookId) {\n          const match = books.find(b => fuzzyMatch(b, {\n            title: data.title,\n            author: data.author,\n            year: normalizedYear\n          }));\n          if (match) {\n            bookId = match.id;\n            book = match;\n          }\n        } else {\n          book = books.find(b => b.id === bookId);\n        }\n        if (bookId && book) {\n          await deleteBook(bookId);\n          setMessages(m => [...m, {\n            role: 'bot',\n            text: `Book \"${book.title}\" deleted.`\n          }]);\n        } else {\n          throw new Error(\"Book to delete not found.\");\n        }\n      }\n\n      // SEARCH\n      else if (intent === 'search') {\n        var _data$query2, _data$query2$toLowerC, _data$title2, _data$title2$toLowerC, _data$author2, _data$author2$toLower;\n        const query = ((_data$query2 = data.query) === null || _data$query2 === void 0 ? void 0 : (_data$query2$toLowerC = _data$query2.toLowerCase) === null || _data$query2$toLowerC === void 0 ? void 0 : _data$query2$toLowerC.call(_data$query2)) || '';\n        const title = ((_data$title2 = data.title) === null || _data$title2 === void 0 ? void 0 : (_data$title2$toLowerC = _data$title2.toLowerCase) === null || _data$title2$toLowerC === void 0 ? void 0 : _data$title2$toLowerC.call(_data$title2)) || '';\n        const author = ((_data$author2 = data.author) === null || _data$author2 === void 0 ? void 0 : (_data$author2$toLower = _data$author2.toLowerCase) === null || _data$author2$toLower === void 0 ? void 0 : _data$author2$toLower.call(_data$author2)) || '';\n        const year = normalizedYear;\n        const results = books.filter(b => {\n          var _b$title, _b$author, _b$title2, _b$author2;\n          return title && ((_b$title = b.title) === null || _b$title === void 0 ? void 0 : _b$title.toLowerCase().includes(title)) || author && ((_b$author = b.author) === null || _b$author === void 0 ? void 0 : _b$author.toLowerCase().includes(author)) || year && b.publicationYear === year || query && (((_b$title2 = b.title) === null || _b$title2 === void 0 ? void 0 : _b$title2.toLowerCase().includes(query)) || ((_b$author2 = b.author) === null || _b$author2 === void 0 ? void 0 : _b$author2.toLowerCase().includes(query)));\n        });\n        if (results.length > 0) {\n          const responseText = results.map(b => `- ${b.title} by ${b.author} (${b.publicationYear || 'Unknown'})`).join('\\n');\n          setMessages(m => [...m, {\n            role: 'bot',\n            text: `Found ${results.length} result(s):\\n${responseText}`\n          }]);\n        } else {\n          setMessages(m => [...m, {\n            role: 'bot',\n            text: `No books found matching your query.`\n          }]);\n        }\n      }\n      await loadBooks();\n    } catch (error) {\n      console.error(\"Error handling input:\", error);\n      setMessages(m => {\n        var _error$response, _error$response$data;\n        return [...m, {\n          role: 'bot',\n          text: (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message || \"Something went wrong. Try again.\"\n        }];\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Ask something...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: msg.role === 'user' ? 'chat-user' : 'chat-bot',\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.role === 'user' ? 'You' : 'Bot', \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }, this), \" \", msg.text]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: input,\n      onChange: e => setInput(e.target.value),\n      placeholder: \"Type your message...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSend,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n}\n_s(CohereChatbot, \"HDAtGPGcvWga1zf1TBXg51T+tsc=\");\n_c = CohereChatbot;\nexport default CohereChatbot;\nvar _c;\n$RefreshReg$(_c, \"CohereChatbot\");","map":{"version":3,"names":["React","useState","addBook","updateBook","deleteBook","callCohere","jsxDEV","_jsxDEV","CohereChatbot","books","loadBooks","_s","messages","setMessages","input","setInput","fuzzyMatch","book","query","titleMatch","title","toLowerCase","includes","authorMatch","author","yearMatch","year","String","publicationYear","handleSend","trim","userMessage","prev","role","text","_data$title","_data$title$toLowerCa","_data$author","_data$author$toLowerC","result","console","log","intent","data","normalizedTitle","call","normalizedAuthor","parsedYear","parseInt","normalizedYear","isNaN","newBook","Date","getFullYear","m","bookId","id","_data$query","_data$query$toLowerCa","queryTitle","replace","possibleBooks","filter","b","find","updated","Error","match","_data$query2","_data$query2$toLowerC","_data$title2","_data$title2$toLowerC","_data$author2","_data$author2$toLower","results","_b$title","_b$author","_b$title2","_b$author2","length","responseText","map","join","error","_error$response","_error$response$data","response","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","msg","index","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/home/abhi/code/project/WebApp/frontend/src/chatbot/CohereChatbot.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { addBook, updateBook, deleteBook } from '../services/bookService';\nimport { callCohere } from './cohereUtils';\n\nfunction CohereChatbot({ books, loadBooks }) {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n\n  const fuzzyMatch = (book, query) => {\n    const titleMatch = query.title ? book.title.toLowerCase().includes(query.title.toLowerCase()) : true;\n    const authorMatch = query.author ? book.author.toLowerCase().includes(query.author.toLowerCase()) : true;\n    const yearMatch = query.year ? String(book.publicationYear) === String(query.year) : true;\n    return titleMatch && authorMatch && yearMatch;\n  };\n\n  const handleSend = async () => {\n    if (!input.trim()) return;\n\n    const userMessage = input.trim();\n    setMessages(prev => [...prev, { role: 'user', text: userMessage }]);\n    setInput('');\n\n    try {\n      const result = await callCohere(userMessage);\n      console.log(\"Parsed result from Cohere:\", result);\n\n      const { intent, data } = result || {};\n      const normalizedTitle = data?.title?.toLowerCase?.();\n      const normalizedAuthor = data?.author?.toLowerCase?.();\n      const parsedYear = parseInt(data?.year || data?.publicationYear);\n      const normalizedYear = isNaN(parsedYear) || parsedYear <= 0 ? null : parsedYear;\n\n      // ADD\n      if (intent === 'add') {\n        const newBook = {\n          title: data.title,\n          author: data.author,\n          publicationYear: normalizedYear || new Date().getFullYear(),\n        };\n        await addBook(newBook);\n        setMessages(m => [...m, { role: 'bot', text: `Book \"${newBook.title}\" by ${newBook.author} added.` }]);\n      }\n\n      // UPDATE\n      else if (intent === 'update') {\n        let bookId = data.id;\n        let book = null;\n\n        if (!bookId) {\n          // Try using query for fallback match\n          const queryTitle = data.query?.toLowerCase?.().replace(/^change title/i, '').trim();\n          const possibleBooks = books.filter(b =>\n            (normalizedTitle && b.title.toLowerCase() === normalizedTitle) ||\n            (queryTitle && b.title.toLowerCase() === queryTitle)\n          );\n          book = possibleBooks[0];\n          if (book) bookId = book.id;\n        } else {\n          book = books.find(b => b.id === bookId);\n        }\n\n        // Try fuzzy fallback\n        if (!book && (normalizedTitle || normalizedAuthor || normalizedYear)) {\n          book = books.find(b => fuzzyMatch(b, { title: normalizedTitle, author: normalizedAuthor, year: normalizedYear }));\n          if (book) bookId = book.id;\n        }\n\n        if (bookId && book) {\n          const updated = {\n            id: bookId,\n            title: data.title || book.title,\n            author: data.author || book.author,\n            publicationYear: normalizedYear || book.publicationYear,\n          };\n          await updateBook(bookId, updated);\n          setMessages(m => [...m, { role: 'bot', text: `Book \"${updated.title}\" updated successfully.` }]);\n        } else {\n          throw new Error(\"Book to update not found.\");\n        }\n      }\n\n      // DELETE\n      else if (intent === 'delete') {\n        let bookId = data.id;\n        let book = null;\n\n        if (!bookId) {\n          const match = books.find(b => fuzzyMatch(b, {\n            title: data.title,\n            author: data.author,\n            year: normalizedYear\n          }));\n          if (match) {\n            bookId = match.id;\n            book = match;\n          }\n        } else {\n          book = books.find(b => b.id === bookId);\n        }\n\n        if (bookId && book) {\n          await deleteBook(bookId);\n          setMessages(m => [...m, { role: 'bot', text: `Book \"${book.title}\" deleted.` }]);\n        } else {\n          throw new Error(\"Book to delete not found.\");\n        }\n      }\n\n      // SEARCH\n      else if (intent === 'search') {\n        const query = data.query?.toLowerCase?.() || '';\n        const title = data.title?.toLowerCase?.() || '';\n        const author = data.author?.toLowerCase?.() || '';\n        const year = normalizedYear;\n\n        const results = books.filter(b =>\n          (title && b.title?.toLowerCase().includes(title)) ||\n          (author && b.author?.toLowerCase().includes(author)) ||\n          (year && b.publicationYear === year) ||\n          (query && (\n            b.title?.toLowerCase().includes(query) ||\n            b.author?.toLowerCase().includes(query)\n          ))\n        );\n\n        if (results.length > 0) {\n          const responseText = results.map(b =>\n            `- ${b.title} by ${b.author} (${b.publicationYear || 'Unknown'})`\n          ).join('\\n');\n          setMessages(m => [...m, { role: 'bot', text: `Found ${results.length} result(s):\\n${responseText}` }]);\n        } else {\n          setMessages(m => [...m, { role: 'bot', text: `No books found matching your query.` }]);\n        }\n      }\n\n      await loadBooks();\n\n    } catch (error) {\n      console.error(\"Error handling input:\", error);\n      setMessages(m => [...m, {\n        role: 'bot',\n        text: error?.response?.data?.message || error.message || \"Something went wrong. Try again.\"\n      }]);\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <h3>Ask something...</h3>\n      <div className=\"chat-box\">\n        {messages.map((msg, index) => (\n          <div key={index} className={msg.role === 'user' ? 'chat-user' : 'chat-bot'}>\n            <strong>{msg.role === 'user' ? 'You' : 'Bot'}:</strong> {msg.text}\n          </div>\n        ))}\n      </div>\n      <input\n        type=\"text\"\n        value={input}\n        onChange={e => setInput(e.target.value)}\n        placeholder=\"Type your message...\"\n      />\n      <button onClick={handleSend}>Send</button>\n    </div>\n  );\n}\n\nexport default CohereChatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}