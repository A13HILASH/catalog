{"ast":null,"code":"export async function callOpenAI(userMessage) {\n  console.log(\"Using API key:\", process.env.REACT_APP_OPENAI_API_KEY);\n  const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      model: \"gpt-4\",\n      messages: [{\n        role: \"system\",\n        content: `You are an assistant for a book catalog system. Understand the user's message and return a JSON like:\n  {\n    \"intent\": \"add\" | \"update\" | \"delete\" | \"search\",\n    \"data\": { \"title\": \"...\", \"author\": \"...\", \"id\": ..., \"query\": \"...\" }\n  }\n  Always return only a valid JSON object in your reply.`\n      }, {\n        role: \"user\",\n        content: userMessage\n      }],\n      temperature: 0.2\n    })\n  });\n  const result = await response.json();\n  console.log(\"OpenAI raw response:\", result);\n  const content = result.choices[0].message.content;\n  try {\n    return JSON.parse(content);\n  } catch (err) {\n    throw new Error(\"Failed to parse OpenAI response.\");\n  }\n}","map":{"version":3,"names":["callOpenAI","userMessage","console","log","process","env","REACT_APP_OPENAI_API_KEY","response","fetch","method","headers","body","JSON","stringify","model","messages","role","content","temperature","result","json","choices","message","parse","err","Error"],"sources":["/home/abhi/code/project/WebApp/frontend/src/chatbot/openaiUtils.js"],"sourcesContent":["export async function callOpenAI(userMessage) {\n    console.log(\"Using API key:\", process.env.REACT_APP_OPENAI_API_KEY);\n\n    const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        model: \"gpt-4\",\n        messages: [\n          {\n            role: \"system\",\n            content: `You are an assistant for a book catalog system. Understand the user's message and return a JSON like:\n  {\n    \"intent\": \"add\" | \"update\" | \"delete\" | \"search\",\n    \"data\": { \"title\": \"...\", \"author\": \"...\", \"id\": ..., \"query\": \"...\" }\n  }\n  Always return only a valid JSON object in your reply.`\n          },\n          {\n            role: \"user\",\n            content: userMessage\n          }\n        ],\n        temperature: 0.2\n      })\n    });\n  \n    const result = await response.json();\n    console.log(\"OpenAI raw response:\", result);\n\n    const content = result.choices[0].message.content;\n  \n    try {\n      return JSON.parse(content);\n    } catch (err) {\n      throw new Error(\"Failed to parse OpenAI response.\");\n    }\n  }\n  "],"mappings":"AAAA,OAAO,eAAeA,UAAUA,CAACC,WAAW,EAAE;EAC1CC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEC,OAAO,CAACC,GAAG,CAACC,wBAAwB,CAAC;EAEnE,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;IACzEC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,eAAe,EAAE,UAAUN,OAAO,CAACC,GAAG,CAACC,wBAAwB,EAAE;MACjE,cAAc,EAAE;IAClB,CAAC;IACDK,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBC,KAAK,EAAE,OAAO;MACdC,QAAQ,EAAE,CACR;QACEC,IAAI,EAAE,QAAQ;QACdC,OAAO,EAAE;AACrB;AACA;AACA;AACA;AACA;MACU,CAAC,EACD;QACED,IAAI,EAAE,MAAM;QACZC,OAAO,EAAEhB;MACX,CAAC,CACF;MACDiB,WAAW,EAAE;IACf,CAAC;EACH,CAAC,CAAC;EAEF,MAAMC,MAAM,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;EACpClB,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEgB,MAAM,CAAC;EAE3C,MAAMF,OAAO,GAAGE,MAAM,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACL,OAAO;EAEjD,IAAI;IACF,OAAOL,IAAI,CAACW,KAAK,CAACN,OAAO,CAAC;EAC5B,CAAC,CAAC,OAAOO,GAAG,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;EACrD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}