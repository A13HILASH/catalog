{"ast":null,"code":"export async function callCohere(userMessage) {\n  const systemPrompt = `\nYou are a book catalog assistant.\n\nAlways respond **only with JSON** in the following format:\n\n{\n  \"intent\": \"add\" | \"update\" | \"delete\" | \"search\",\n  \"data\": { \"title\": \"...\", \"author\": \"...\", \"id\": ..., \"query\": \"...\" }\n}\n\nNever explain or comment. Just reply with valid JSON.\n\nNow process this request:\n${userMessage}\n  `.trim();\n  const response = await fetch(\"https://api.cohere.ai/v1/chat\", {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": `Bearer ${process.env.REACT_APP_COHERE_API_KEY}`,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      model: \"command-r-plus\",\n      message: systemPrompt,\n      temperature: 0.2,\n      chat_history: []\n    })\n  });\n  const result = await response.json();\n  console.log(\"Cohere response:\", result);\n  let content = result.text || result.reply;\n\n  // Clean: Remove markdown ```json blocks\n  content = content.replace(/^```json/i, '').replace(/^```/, '').replace(/```$/, '').trim();\n  try {\n    return JSON.parse(content);\n  } catch (err) {\n    console.error(\"Invalid JSON response:\", content);\n    throw new Error(\"Failed to parse Cohere response: \" + content);\n  }\n}","map":{"version":3,"names":["callCohere","userMessage","systemPrompt","trim","response","fetch","method","headers","process","env","REACT_APP_COHERE_API_KEY","body","JSON","stringify","model","message","temperature","chat_history","result","json","console","log","content","text","reply","replace","parse","err","error","Error"],"sources":["/home/abhi/code/project/WebApp/frontend/src/chatbot/cohereUtils.js"],"sourcesContent":["export async function callCohere(userMessage) {\n  const systemPrompt = `\nYou are a book catalog assistant.\n\nAlways respond **only with JSON** in the following format:\n\n{\n  \"intent\": \"add\" | \"update\" | \"delete\" | \"search\",\n  \"data\": { \"title\": \"...\", \"author\": \"...\", \"id\": ..., \"query\": \"...\" }\n}\n\nNever explain or comment. Just reply with valid JSON.\n\nNow process this request:\n${userMessage}\n  `.trim();\n\n  const response = await fetch(\"https://api.cohere.ai/v1/chat\", {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": `Bearer ${process.env.REACT_APP_COHERE_API_KEY}`,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      model: \"command-r-plus\",\n      message: systemPrompt,\n      temperature: 0.2,\n      chat_history: []\n    })\n  });\n\n  const result = await response.json();\n  console.log(\"Cohere response:\", result);\n\n  let content = result.text || result.reply;\n\n  // Clean: Remove markdown ```json blocks\n  content = content\n    .replace(/^```json/i, '')\n    .replace(/^```/, '')\n    .replace(/```$/, '')\n    .trim();\n\n  try {\n    return JSON.parse(content);\n  } catch (err) {\n    console.error(\"Invalid JSON response:\", content);\n    throw new Error(\"Failed to parse Cohere response: \" + content);\n  }\n}\n"],"mappings":"AAAA,OAAO,eAAeA,UAAUA,CAACC,WAAW,EAAE;EAC5C,MAAMC,YAAY,GAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAED,WAAW;AACb,GAAG,CAACE,IAAI,CAAC,CAAC;EAER,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;IAC5DC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,eAAe,EAAE,UAAUC,OAAO,CAACC,GAAG,CAACC,wBAAwB,EAAE;MACjE,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBC,KAAK,EAAE,gBAAgB;MACvBC,OAAO,EAAEb,YAAY;MACrBc,WAAW,EAAE,GAAG;MAChBC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC,CAAC;EAEF,MAAMC,MAAM,GAAG,MAAMd,QAAQ,CAACe,IAAI,CAAC,CAAC;EACpCC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEH,MAAM,CAAC;EAEvC,IAAII,OAAO,GAAGJ,MAAM,CAACK,IAAI,IAAIL,MAAM,CAACM,KAAK;;EAEzC;EACAF,OAAO,GAAGA,OAAO,CACdG,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CACxBA,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CACnBA,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CACnBtB,IAAI,CAAC,CAAC;EAET,IAAI;IACF,OAAOS,IAAI,CAACc,KAAK,CAACJ,OAAO,CAAC;EAC5B,CAAC,CAAC,OAAOK,GAAG,EAAE;IACZP,OAAO,CAACQ,KAAK,CAAC,wBAAwB,EAAEN,OAAO,CAAC;IAChD,MAAM,IAAIO,KAAK,CAAC,mCAAmC,GAAGP,OAAO,CAAC;EAChE;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}